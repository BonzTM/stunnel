# =============================================================
# GitHub Actions Workflow for Building and Publishing stunnel Docker Image
# This workflow builds a Docker image for stunnel, runs security scans,
# and publishes to both GitHub Container Registry and Docker Hub
# =============================================================

name: Build Image and Push

# =============================================================
# TRIGGERS - When this workflow should run
# =============================================================
on:
  # Manual trigger via GitHub UI
  workflow_dispatch:
  # Automatic trigger on push to main branch
  push:
    branches:
      - main
  # Automatic trigger every Sunday at midnight
  schedule:
    - cron: '0 0 * * SUN'

# =============================================================
# PERMISSIONS - Security permissions for the GitHub token
# =============================================================
permissions:
  packages: write    # Required to push to GitHub Container Registry
  contents: read     # Required to checkout repository
  security-events: write  # Required for vulnerability scanning results

# =============================================================
# ENVIRONMENT VARIABLES - Global variables used throughout workflow
# =============================================================
env:
  GHCR_REPO: ghcr.io/${{ github.repository }} # make lowercase further down
  DOCKERHUB_REPO: bonztm/stunnel

# =============================================================
# JOBS - Main workflow components
# =============================================================
jobs:
  # Build and push stunnel Docker image to registries
  build-push-stunnel:
    runs-on: 
      - stunnel    # Uses a self-hosted runner with the 'stunnel' label

    steps:
      # =============================================================
      # PREPARATION STEPS - Initial setup and environment preparation
      # =============================================================
      
      # Convert repository name to lowercase for Docker compatibility
      - id: lower-repo
        name: Repository to lowercase
        run: |
          echo "repository=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT

      # Checkout the repository code to the runner
      - name: checkout repo content
        uses: actions/checkout@v4

      # Get current date for tagging images
      - name: Get current date
        id: date
        run: echo "date=$(date --rfc-3339=date)" >> $GITHUB_OUTPUT

      # =============================================================
      # AUTHENTICATION STEPS - Login to container registries
      # =============================================================
      
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # =============================================================
      # DOCKER BUILD SETUP - Configure Docker build environment
      # =============================================================
      
      # Create a Docker context for the build
      - name: Create docker context
        run: |
          docker context create stunnel

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: stunnel

      # Generate metadata (tags) for the Docker images
      - name: Generate docker image tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          # Include a 'latest' tag with each build
          flavor: |
            latest=true
          # Push to both GitHub Container Registry and Docker Hub
          images: |
            ${{ env.GHCR_REPO }}
            ${{ env.DOCKERHUB_REPO }}
          # Define tagging strategy - PR, branch, date, SHA, and semver
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=raw,value=${{ steps.date.outputs.date }}
            type=sha,enable=true,priority=100,prefix=sha-,suffix=,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # =============================================================
      # BUILD AND PUSH - Build and push the Docker image
      # =============================================================
      
      # Build the Docker image and push to registries
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .             # Build context is the root directory
          push: true             # Push the built image to registries
          tags: ${{ steps.metadata.outputs.tags }}  # Use tags from metadata step
          platforms: linux/amd64 # Build for amd64 architecture
          cache-from: type=gha   # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max  # Store cache for future builds

      # =============================================================
      # SECURITY SCANNING - Scan image for vulnerabilities
      # =============================================================
      
      # Run Trivy vulnerability scanner (SARIF format for GitHub Security tab)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REPO }}:sha-${{ github.sha }}
          format: 'sarif'        # Output format for GitHub Security
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'  # Only scan for high and critical vulnerabilities

      # Upload security scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()  # Always run this step, even if previous steps fail
        with:
          sarif_file: 'trivy-results.sarif'

      # Generate human-readable vulnerability report
      - name: Run Trivy vulnerability scanner (HTML Report)
        if: always()  # Always run this step, even if previous steps fail
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REPO }}:sha-${{ github.sha }}
          format: 'table'  # Human-readable table format
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH,MEDIUM'  # Include medium severity issues in report
          
      # Upload scan results as downloadable artifact
      - name: Upload Trivy scan results as artifact
        if: always()  # Always run this step, even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.txt

      # Check for critical vulnerabilities and warn if found
      - name: Check for critical vulnerabilities
        if: github.event_name != 'pull_request'  # Skip on PRs
        run: |
          if grep -q "CRITICAL: [1-9]" trivy-results.txt; then
            echo "::warning::Critical vulnerabilities found in the image!"
            echo "Please review the vulnerability report. The deployment will continue, but you should address these issues."
          fi

      # =============================================================
      # CLEANUP - Post-build cleanup tasks
      # =============================================================
      
      # Remove the Docker context after build
      - name: Remove docker context
        if: always()  # Always run this step, even if previous steps fail
        run: docker context rm stunnel

      # =============================================================
      # DOCUMENTATION - Update repository documentation
      # =============================================================
      
      # Update Docker Hub description from README.md
      - name: Update Dockerhub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPO }}
          readme-filepath: README.md  # Use repo README as Docker Hub description
          short-description: ${{ github.event.repository.description }}
